apiVersion: v1
kind: Namespace
metadata:
  name: hypnos-smp-044
  labels:
    app: hypnos-044
    io.shyrka.erebus/hypnos: "sample044"
    io.shyrka.erebus/role: "test"
spec:
  finalizers:
    - kubernetes
status:
  phase: Active
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: hypnos-smp-044
  labels:
    app: hypnos-044
    io.shyrka.erebus/hypnos: "sample"
    io.shyrka.erebus/role: "test"
spec:
  ports:
    - port: 27017
      name: peer
  clusterIP: None
  selector:
    app: mongo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
  namespace: hypnos-smp-044
  labels:
    app: hypnos-044
    io.shyrka.erebus/role: "test"
data:
  init.sh: |
    #!/bin/bash

    # Need to wait for the readiness health check to pass so that the
    # mongo names resolve. This is kind of wonky.
    until ping -c 1 ${HOSTNAME}.mongo; do
      echo "waiting for DNS (${HOSTNAME}.mongo)..."
      sleep 2
    done

    until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
      echo "connecting to local mongo..."
      sleep 2
    done
    echo "connected to local."

    HOST=mongo-0.mongo:27017

    until /usr/bin/mongo --host=${HOST} --eval 'printjson(db.serverStatus())'; do
      echo "connecting to remote mongo..."
      sleep 2
    done
    echo "connected to remote."

    if [[ "${HOSTNAME}" != 'mongo-0' ]]; then
      until /usr/bin/mongo --host=${HOST} --eval="printjson(rs.status())" \
            | grep -v "no replset config has been received"; do
        echo "waiting for replication set initialization"
        sleep 2
      done
      echo "adding self to mongo-0"
      /usr/bin/mongo --host=${HOST} \
         --eval="printjson(rs.add('${HOSTNAME}.mongo'))"
    fi

    if [[ "${HOSTNAME}" == 'mongo-0' ]]; then
      echo "initializing replica set"
      /usr/bin/mongo --eval="printjson(rs.initiate(\
          {'_id': 'rs0', 'members': [{'_id': 0, \
           'host': 'mongo-0.mongo:27017'}]}))"
    fi
    echo "initialized"

    while true; do
      sleep 3600
    done

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: hypnos-smp-044
  labels:
    #app: hypnos-044
    io.shyrka.erebus/hypnos: "sample"
    io.shyrka.erebus/role: "test"
spec:
  serviceName: "mongo"
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongodb
          image: mongo:3.4.1
          command:
            - mongod
            - --replSet
            - rs0
          ports:
            - containerPort: 27017
              name: web
          volumeMounts:
            - name: mng-data
              mountPath: /data/db
        # This container initializes the mongodb, then sleeps.
        #@TODO switch to init containers
        - name: init-mongo
          image: mongo:3.4.1
          command:
            - bash
            - /config/init.sh
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: 'root'
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: 'fullopen'
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: "mongo-init"
  volumeClaimTemplates:
    - metadata:
        name: mng-data
        labels:
          app: hypnos-044
          io.shyrka.erebus/role: "test"
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    #io.shyrka.erebus.hypnos/skipCron: "true"
  generation: 1
  labels:
    io.shyrka.erebus/hypnos: "sample"
    io.shyrka.erebus/role: "test"
    app: hypnos-044
  name: hypnos-044
  namespace: hypnos-smp-044
spec:
  progressDeadlineSeconds: 100
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: hypnos-044
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: hypnos-044
    spec:
      containers:
        - image: quay.io/kanedafromparis/nginx:ocp-0.3
          imagePullPolicy: IfNotPresent
          name: nginx
          resources:
            requests:
              cpu: 200m
              memory: 16M
            limits:
              cpu: 250m
              memory: 24M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          ports:
            - containerPort: 8080
              protocol: TCP
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 5
